apply plugin: 'com.android.application'

android {
    dexOptions {
        javaMaxHeapSize "4g"
    }

    namespace "net.basov.omn"

    def last_tag = getGitRevParseInfo("describe --tags --abbrev=0")
    def commit_count = getGitRevParseInfo("rev-list --count ${last_tag}..")
    def current_commit = getGitRevParseInfo("rev-parse --short")

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "OpenMarkdownNotes.${variant.versionName}.apk"
        }

    }

    compileSdkVersion 34
    buildToolsVersion '34.0.0'

    defaultConfig {
// Keep two lines around applicationId unchanged to allow use patch for F-Droid build


        applicationId "net.basov.omn"


// End of strings reserved for F-Droid patch
        minSdkVersion 17
        targetSdkVersion 34
        versionCode 3400
        versionName "00.34.00"
    }

    signingConfigs {
// Define MY_RELEASE_... and MY_DEBUG_... in gradle.properties at the root of application source
        release {
            storePassword MY_RELEASE_KEYSTORE_PASSWORD
            keyAlias MY_RELEASE_KEY_ALIAS
            keyPassword MY_RELEASE_KEY_PASSWORD
            storeFile file(MY_RELEASE_KEYSTORE_FILE)
            v2SigningEnabled false
        }
        debug {
            storeFile file(MY_DEBUG_KEYSTORE_FILE)
            storePassword MY_DEBUG_KEYSTORE_PASSWORD
            keyAlias MY_DEBUG_KEY_ALIAS
            keyPassword MY_DEBUG_KEY_PASSWORD
        }
    }

    buildTypes {
         release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlignEnabled true
            applicationIdSuffix '.fdroid'
            versionNameSuffix "fdroid-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.release
        }
        general {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlignEnabled true
            applicationIdSuffix '.r'
            versionNameSuffix "r-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.release
        }
        beta {
            applicationIdSuffix '.b'
            versionNameSuffix "b-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.debug
        }
        debug {
            debuggable true
            versionNameSuffix 'a-' + commit_count + "-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.debug
        }
    }
}

task makeHighlightJS(type: Exec) {
    inputs.file file("highlight.js/src/highlight.js")
    outputs.file file("src/main/assets/js/highlight.pack.js")
    buildHighlightJS()
}

void buildHighlightJS() {
    exec {
        workingDir 'highlight.js'
        commandLine "npm", "install"
    }
    exec {
        workingDir 'highlight.js'
        commandLine "nodejs", "tools/build.js", ":common"
    }
    exec {
        workingDir 'highlight.js'
        commandLine "cp", "build/highlight.pack.js", "../src/main/assets/js/highlight.pack.js"
    }
    exec {
        workingDir 'highlight.js'
        commandLine "cp", "src/styles/github.css", "../src/main/assets/css/highlight.css"
    }
    println "*-*-* highlight.js generated *-*-*"
}

task makeMarkedJS(type: Exec) {
    inputs.file file("marked/lib/marked.js")
    outputs.file file("src/main/assets/js/marked.min.js")
    buildMarkedJS()
}
void buildMarkedJS() {
    exec {
        workingDir 'marked'
        commandLine "make"
    }
    exec {
        workingDir 'marked'
        commandLine "cp", "marked.min.js", "../src/main/assets/js/marked.min.js"
    }
    exec {
        workingDir 'marked'
        commandLine "make", "clean"
    }
    exec {
        workingDir 'marked'
        commandLine "git", "checkout", "marked.min.js"
    }
    println "*-*-* marked.js generated *-*-*"
}

task makeIconFont(type: Exec) {
    outputs.file file("src/main/assets/fonts/google-material/MaterialIcons-Regular.woff2")
    buildIconFont()
}
void buildIconFont() {
    exec {
        workingDir 'src/main/assets/fonts/google-material'
        //commandLine "wget", "-q", "https://github.com/google/material-design-icons/raw/master/iconfont/MaterialIcons-Regular.woff2", "-O", "MaterialIcons-Regular.woff2"
        commandLine "wget", "-q", "https://github.com/google/material-design-icons/raw/3.0.2/iconfont/MaterialIcons-Regular.woff2", "-O", "MaterialIcons-Regular.woff2"
    }
    println "*-*-* icon font copied *-*-*"
}

task makeStrings() {
    inputs.dir("templates")
    outputs.files("src/main/assets/md/default/Help.md", "src/main/assets/md/default/Help_legacy.md", "src/main/res/valies/strings.xml", "src/main/res/valies-v21/strings.xml")
    buildStringsFromTemplates()
}
void buildStringsFromTemplates() {
    exec {
        workingDir 'templates'
        commandLine 'sh', '@apply_templates.sh'
    }
    println "*-*-* strings generated *-*-*"
}

build.dependsOn makeStrings
build.dependsOn makeHighlightJS
build.dependsOn makeMarkedJS
build.dependsOn makeIconFont

dependencies {
    testImplementation 'junit:junit:4.12'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

static def getGitRevParseInfo (what) {
    def cmd = "git " + what + " HEAD"
    def info = cmd.execute ()
    info.text.trim ()
}
