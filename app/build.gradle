apply plugin: 'com.android.application'

android {

    def last_tag = getGitRevParseInfo("describe --tags --abbrev=0")
    def commit_count = getGitRevParseInfo("rev-list --count ${last_tag}..")
    def current_commit = getGitRevParseInfo("rev-parse --short")

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "OpenMarkdownNotes." + versionName + ".apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }

    }

    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "net.basov.omn"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1606
        versionName "00.16.06"
    }

    signingConfigs {
        release {
            keyAlias 'mvb_key'
            storeFile file('../../.keys/mvb-release.keystore')
            v2SigningEnabled false
        }
        debug {
            storeFile file('../../.keys/mvb-debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlignEnabled true
            applicationIdSuffix '.r'
            versionNameSuffix "r-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.release
        }
        betta {
            applicationIdSuffix '.b'
            versionNameSuffix "b-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.debug
        }
        debug {
            debuggable true
            versionNameSuffix 'a-' + commit_count + "-g" + current_commit
            resValue "string", "git_describe", getGitRevParseInfo("describe --tags --abbrev=1")
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        main {
            minSdkVersion 21
        }
        legacy {
            minSdkVersion 17
            maxSdkVersion 20
            targetSdkVersion 20
            versionName "legacy." + defaultConfig.versionName
        }
    }
}

task makeHighlightJS(type: Exec) {
    inputs.file file("ghlight.js/src/highligt.js")
    outputs.file file("src/main/assets/js/highlight.pack.js")
    buildHighlightJS()
}

void buildHighlightJS() {
    exec {
        workingDir 'highlight.js'
        commandLine "npm", "install"
    }
    exec {
        workingDir 'highlight.js'
        commandLine "nodejs", "tools/build.js", ":common"
    }
    exec {
        workingDir 'highlight.js'
        commandLine "cp", "build/highlight.pack.js", "../src/main/assets/js/highlight.pack.js"
    }
    exec {
        workingDir 'highlight.js'
        commandLine "cp", "src/styles/github.css", "../src/main/assets/css/highlight.css"
    }
    println "*-*-* ghlight.js generated *-*-*"
}

task makeMarkedJS(type: Exec) {
    inputs.file file("marked/lib/marked.js")
    outputs.file file("src/main/assets/js/marked.min.js")
    buildMarkedJS()
}
void buildMarkedJS() {
    exec {
        workingDir 'marked'
        commandLine "make"
    }
    exec {
        workingDir 'marked'
        commandLine "cp", "marked.min.js", "../src/main/assets/js/marked.min.js"
    }
    exec {
        workingDir 'marked'
        commandLine "make", "clean"
    }
    exec {
        workingDir 'marked'
        commandLine "git", "checkout", "marked.min.js"
    }
    println "*-*-* marked.js generated *-*-*"
}

task makeIconFont(type: Exec) {
    outputs.file file("src/main/assets/fonts/google-material/MaterialIcons-Regular.woff2")
    buildIconFont()
}
void buildIconFont() {
    exec {
        workingDir 'src/main/assets/fonts/google-material'
        commandLine "wget", "-q", "https://github.com/google/material-design-icons/raw/master/iconfont/MaterialIcons-Regular.woff2", "-O", "MaterialIcons-Regular.woff2"
    }
    println "*-*-* icon font copied *-*-*"
}

build.dependsOn makeHighlightJS
build.dependsOn makeMarkedJS
build.dependsOn makeIconFont

dependencies {
    testCompile 'junit:junit:4.12'
    compile fileTree(include: ['*.jar'], dir: 'libs')
}

def getGitRevParseInfo (what) {
    def cmd = "git " + what + " HEAD"
    def proc = cmd.execute ()
    proc.text.trim ()
}
